
.. _software_design:

===============
Software Design
===============

.. _class_diagram:

Class Diagram
=============

.. uml generated by `pyreverse mlx.warnings --filter PUB_ONLY -o plantuml`
.. uml::

    @startuml classes
    set namespaceSeparator none
    class "CoverityChecker" as mlx.warnings.regex_checker.CoverityChecker {
        checkers : dict
        count : int
        cq_default_path
        cq_description_template
        cq_findings
        name : str
        pattern
        check(content)
        parse_config(config)
        return_check_limits()
        return_count()
    }
    class "CoverityClassificationChecker" as mlx.warnings.regex_checker.CoverityClassificationChecker {
        SEVERITY_MAP : dict
        classification
        count
        cq_description_template
        logging_fmt : str
        name : str
        add_code_quality_finding(match)
        check(content)
    }
    class "DebugOnlyFilter" as mlx.warnings.warnings_checker.DebugOnlyFilter {
        filter(record: logging.LogRecord) -> bool
    }
    class "DoxyChecker" as mlx.warnings.regex_checker.DoxyChecker {
        name : str
        pattern
    }
    class "Finding" as mlx.warnings.code_quality.Finding {
        column
        description
        fingerprint
        fingerprints : dict
        line
        path
        severity
        to_dict()
    }
    class "JUnitChecker" as mlx.warnings.junit_checker.JUnitChecker {
        count
        name : str
        name_repr
        check(content)
        prepare_tree(root_input)
    }
    class "PolyspaceChecker" as mlx.warnings.polyspace_checker.PolyspaceChecker {
        checkers : list
        count : int
        cq_default_path
        cq_description_template
        cq_findings
        maximum
        minimum
        name : str
        check(content)
        parse_config(config)
        return_check_limits()
        return_count()
    }
    class "PolyspaceFamilyChecker" as mlx.warnings.polyspace_checker.PolyspaceFamilyChecker {
        check_value
        code_quality_severity : dict
        column_name
        count
        cq_description_template
        family_value
        logging_fmt : str
        name : str
        add_code_quality_finding(row)
        check(content)
    }
    class "RegexChecker" as mlx.warnings.regex_checker.RegexChecker {
        SEVERITY_MAP : dict
        count
        name : str
        pattern : NoneType
        add_code_quality_finding(match)
        check(content)
    }
    class "RobotChecker" as mlx.warnings.robot_checker.RobotChecker {
        checkers : list
        count : int
        logging_fmt : str
        maximum
        minimum
        name : str
        check(content)
        parse_config(config)
        return_check_limits()
        return_count()
    }
    class "RobotSuiteChecker" as mlx.warnings.robot_checker.RobotSuiteChecker {
        check_suite_name : bool
        is_valid_suite_name : bool
        logging_fmt : str
        name : str
        suite_name
        suite_name_repr
        check(content)
    }
    class "SphinxChecker" as mlx.warnings.regex_checker.SphinxChecker {
        name : str
        pattern
        sphinx_deprecation_regex : str
        sphinx_deprecation_regex_in_match : str
        include_sphinx_deprecation()
    }
    class "WarningsChecker" as mlx.warnings.warnings_checker.WarningsChecker {
        count : int
        cq_default_path : str
        cq_description_template
        cq_enabled : bool
        cq_findings
        exclude_patterns : list
        include_patterns : list
        is_sub_checker
        logger : LoggerAdapter, NoneType, RootLogger
        logging_args : tuple
        logging_fmt : str
        maximum
        minimum
        name : str
        name_repr
        add_patterns(regexes, pattern_container)
        {abstract}check(content)
        parse_config(config)
        return_check_limits()
        return_count()
    }
    class "<color:red>WarningsConfigError</color>" as mlx.warnings.exceptions.WarningsConfigError {
    }
    class "WarningsPlugin" as mlx.warnings.warnings.WarningsPlugin {
        activated_checkers : dict
        count : int
        cq_enabled : bool
        printout : bool
        public_checkers : tuple
        activate_checker(checker_type)
        activate_checker_name(name)
        check(content)
        check_logfile(file)
        config_parser(config)
        configure_maximum(maximum)
        configure_minimum(minimum)
        get_checker(name)
        return_check_limits(name)
        return_count(name)
        toggle_printout(printout)
        write_code_quality_report(out_file)
    }
    class "XMLRunnerChecker" as mlx.warnings.regex_checker.XMLRunnerChecker {
        name : str
        pattern
    }
    mlx.warnings.junit_checker.JUnitChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.polyspace_checker.PolyspaceChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.polyspace_checker.PolyspaceFamilyChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.regex_checker.CoverityChecker --|> mlx.warnings.regex_checker.RegexChecker
    mlx.warnings.regex_checker.CoverityClassificationChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.regex_checker.DoxyChecker --|> mlx.warnings.regex_checker.RegexChecker
    mlx.warnings.regex_checker.RegexChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.regex_checker.SphinxChecker --|> mlx.warnings.regex_checker.RegexChecker
    mlx.warnings.regex_checker.XMLRunnerChecker --|> mlx.warnings.regex_checker.RegexChecker
    mlx.warnings.robot_checker.RobotChecker --|> mlx.warnings.warnings_checker.WarningsChecker
    mlx.warnings.robot_checker.RobotSuiteChecker --|> mlx.warnings.junit_checker.JUnitChecker
    @enduml


String Handling
===============

Convention is to use plain python strings everywhere. Where needed the strings can be converted to anything else.

Example: junitparser expects byte array objects, so we encode our string right before passing it to junitparser.

Instrument Module
=================

.. automodule:: mlx.warnings
    :members:
    :undoc-members:
    :show-inheritance:
